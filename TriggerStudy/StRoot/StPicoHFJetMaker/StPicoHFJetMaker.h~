#ifndef StPicoHFMyAnaMaker_h
#define StPicoHFMyAnaMaker_h

#include "StarClassLibrary/StThreeVectorF.hh"
#include "StarClassLibrary/StLorentzVectorF.hh"
#include "StarClassLibrary/StPhysicalHelixD.hh"

#include "StPicoDstMaker/StPicoDst.h"
#include "StPicoDstMaker/StPicoDstMaker.h"
#include "StPicoEvent/StPicoEvent.h"
#include "StPicoEvent/StPicoTrack.h"
#include "StPicoEvent/StPicoBTofPidTraits.h"
#include "StPicoEvent/StPicoBEmcPidTraits.h"
#include "StBTofUtil/tofPathLength.hh"

#include "../StPicoJetMaker/StPicoJetMaker.h"

#include "TNtuple.h"
#include "TString.h"
#include "TSystem.h"

#include "TH2D.h"

#include "TH1I.h"
#include "TH1F.h"
#include "TH1D.h"
#include "TRandom.h"
#include "TLorentzVector.h"

#include <vector>

using namespace std;


class StPicoDst;
class StPicoDstMaker;
class StPicoEvent;
class StPicoTrack;


class StPicoHFJetMaker : public StPicoJetMaker {
 public:
  StPicoHFJetMaker(char const* name, StPicoDstMaker* picoMaker, char const* outputBaseFileName);
  virtual ~StPicoHFJetMaker();
  
  virtual Int_t InitJets();
  virtual Int_t MakeJets();
  virtual void  ClearJets(Option_t *opt);
  virtual Int_t FinishJets();


  //void setRefMutCorr(StRefMultCorr *gRefMultCorr) { mRefmultCorrUtil = gRefMultCorr; }
  //StRefMultCorr* getRefMultCorr() { return mRefmultCorrUtil; }

    void doAuAu(bool kDoAuAu);

    void setR(vector<float> &fR);
    void setAcuts(vector<float> &fAcuts);
    void setEmbPt(vector<float> &fEmbPt);

	void setGhostMaxrap(float fGhostMaxrap);
    void setNpTlead(int npTlead);
	void setR_bg(float fR_bg);
    void setNJetsRemove(int nJetsRemove);
    void setJetPtMin(float jetPtMin);
    void setMcJetType(unsigned int us);

    unsigned int mcJetType();

	enum eMcJetType {SingleParticle, Pythia, Jewel};

 protected:
	TString   mInputFileName;        //! *.list - MuDst or picoDst  //Jana

private:

  // -- private members --------------------------


  // -- ADD USER MEMBERS HERE -------------------
    bool kDoAuAu;

	vector<float> fR;
	vector<float> fAcuts;
	vector<float> fEmbPt;

	float fRBg;
	float fGhostMaxrap;
	float fJetPtMin;
	int npTlead;
	int nJetsRemove;
	unsigned int mMcJetType;



  // -- ADD USER MEMBERS HERE -------------------

  ClassDef(StPicoHFJetMaker, 0)

};


inline void StPicoHFJetMaker::doAuAu(bool kDoAuAu) {
	StPicoHFJetMaker::kDoAuAu = kDoAuAu;
}

inline void StPicoHFJetMaker::setR(vector<float> &fR) {
	StPicoHFJetMaker::fR = fR;
}

inline void StPicoHFJetMaker::setAcuts(vector<float> &fAcuts) {
	StPicoHFJetMaker::fAcuts = fAcuts;
}

inline void StPicoHFJetMaker::setEmbPt(vector<float> &fEmbPt) {
	StPicoHFJetMaker::fEmbPt = fEmbPt;
}

inline void StPicoHFJetMaker::setR_bg(float fR_bg) {
	StPicoHFJetMaker::fRBg = fR_bg;
}

inline void StPicoHFJetMaker::setGhostMaxrap(float fGhostMaxrap) {
	StPicoHFJetMaker::fGhostMaxrap = fGhostMaxrap;
}

inline void StPicoHFJetMaker::setNJetsRemove(int nJetsRemove) {
	StPicoHFJetMaker::nJetsRemove = nJetsRemove;
}

inline void StPicoHFJetMaker::setJetPtMin(float jetPtMin) {
	StPicoHFJetMaker::fJetPtMin = jetPtMin;
}

inline void StPicoHFJetMaker::setMcJetType(unsigned int us) {
	StPicoHFJetMaker::mMcJetType = us;
}

inline unsigned int StPicoHFJetMaker::mcJetType() {
	return mMcJetType;
}

inline void StPicoHFJetMaker::setNpTlead(int npTlead) {
    StPicoHFJetMaker::npTlead = npTlead;
}

#endif

//TODO: Add BEMC and TOF flag matching in the code.
//TODO: Add RefMultCorr routine to the current class.
