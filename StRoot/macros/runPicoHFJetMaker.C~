
/* **************************************************
 *   Run StPicoHFMyAnaMaker in different modes
 * --------------------------------------------------
 * run as :
 *  root -l -b -q StRoot/macros/loadSharedHFLibraries.C StRoot/macros/runPicoHFMyAnaMaker.C++
 *   or
 *  root -l -b -q StRoot/macros/runPicoHFMyAnaMaker.C
 *
 * -------------------------------------------------- 
 *  - Different modes to use the  class
 *    - StPicoJetMaker::kAnalyze - don't write candidate trees, just fill histograms
 *        inputFile : fileList of PicoDst files or single picoDst file
 *        outputFile: baseName for outfile 
 *    - StPicoJetMaker::kWrite   - write candidate trees
 *        inputFile : path to single picoDist file
 *        outputFile: baseName for outfile 
 *    - StPicoJetMaker::kRead    - read candidate trees and fill histograms
 *        inputFile : fileList of PicoDst files
 *        outputFile: baseName for outfile 
 *
 * --------------------------------------------------
 *  Authors:  Xin Dong        (xdong@lbl.gov)
 *            Michael Lomnitz (mrlomnitz@lbl.gov)
 *            Mustafa Mustafa (mmustafa@lbl.gov)
 *            Jochen Thaeder  (jmthader@lbl.gov)
 *
 * **************************************************
 */

#ifndef __CINT__
#include "TROOT.h"
#include "TSystem.h"
#include "TChain.h"

#include "StChain/StMaker.h"
#include "StChain/StChain.h"

#include "StPicoDstMaker/StPicoDstMaker.h"
// Jana was 
//#include "../StPicoCuts/StPicoCuts.h"

#include "StPicoCuts/StPicoCuts.h"


#include "loadSharedHFLibraries.C"

#include <iostream>
#include <ctime>
#include <cstdio>

//Jana was ../StPicoHFJetMaker/StPicoHFJetMaker.h"
#include "StPicoHFJetMaker/StPicoHFJetMaker.h"


//#include "StRefMultCorr/StRefMultCorr.h"
//#include "StRefMultCorr/CentralityMaker.h"

using namespace std;

#else
class StChain;
#endif

StChain *chain;

//void runPicoHFJetMaker(const Char_t *inputFile, const Char_t *outputFile,
//			 const unsigned int makerMode,
//			 /*const Char_t *badRunListFileName="BadRunList_MB.list",*/ const Char_t *treeName="PicoDst") {
 

void runPicoHFJetMaker(const Char_t *inputFile, const Char_t *outputFile="outputBaseName",  
			const unsigned int makerMode = 0 /*kAnalyze*/,
		        const Char_t *treeName = "picoDst") {



 string SL_version = "SL16j"; //new: SL16d -> SL16j
  string env_SL = getenv ("STAR");
  if (env_SL.find(SL_version)==string::npos) {
      cout<<"Environment Star Library does not match the requested library in runPicoHFMyAnaMaker.C. Exiting..."<<endl;
      exit(1);
  }

#ifdef __CINT__
  gROOT->LoadMacro("loadSharedHFLibraries.C");
  loadSharedHFLibraries();
#endif
  

  chain = new StChain();

  // ========================================================================================
  //makerMode    = StPicoJetMaker::kAnalyze;
  // ========================================================================================
  
  cout << "Maker Mode    " << makerMode << endl;
  cout << "TreeName      " << treeName << endl;
  cout << "Input file: " << inputFile << endl;

  TString sInputFile(inputFile);
  TString sInputListHF(""); 
  TString sTreeName(treeName);


  if (makerMode == StPicoJetMaker::kAnalyze) {
    if (!sInputFile.Contains(".list") && !sInputFile.Contains("picoDst.root")) {
      cout << "No input list or picoDst root file provided! Exiting..." << endl;
      exit(1);
    }
  }
  else if (makerMode == StPicoJetMaker::kWrite) {
    if (!sInputFile.Contains("picoDst.root")) {
      cout << "No input picoDst root file provided! Exiting..." << endl;
      exit(1);
    }
  } else {
    cout << "Unknown makerMode! Exiting..." << endl;
    exit(1);
  }

  cout <<  "sInputFile.Data() is  " << sInputFile.Data() << endl;
 

  StPicoDstMaker *picoDstMaker = new StPicoDstMaker(static_cast<StPicoDstMaker::PicoIoMode>(StPicoDstMaker::IoRead), sInputFile.Data(), "picoDstMaker"); //for local testing only, added .Data() to sInputFile (robotmon)

  StPicoDstMaker* picoDstMaker = new StPicoDstMaker(StPicoDstMaker::IoRead, sInputFile, "picoDstMaker"); //for local testing only
  //jana commented out
  //  StPicoHFJetMaker *stPicoHFJetMaker = new StPicoHFJetMaker("stPicoHFJetMaker", picoDstMaker, outputFile);
  StPicoHFJetMaker *stPicoHFJetMaker = new StPicoHFJetMaker("stPicoHFJetMaker", picoDstMaker, outputFile, sInputListHF);

  stPicoHFJetMaker->setMakerMode(makerMode);
  stPicoHFJetMaker->setTreeName(treeName);

  
  StPicoCuts* picoCuts = new StPicoCuts("PicoCuts");
  stPicoHFJetMaker->setPicoCuts(picoCuts);

  // ---------------------------------------------------
  // -- Set Base cuts for HF analysis

  // -- File name of bad run list
  //picoCuts->setBadRunListFileName(badRunListFileName);

  // -- ADD USER CUTS HERE ----------------------------
  picoCuts->setCutVzMax(6.);
  picoCuts->setCutVzVpdVzMax(3.);
  picoCuts->setCutRefMult(396, 100000);

	//SL16j triggers


  picoCuts->addTriggerId(520802);    // VPDMB-5-p-hlt
  picoCuts->addTriggerId(520812);    // VPDMB-5-p-hlt
  picoCuts->addTriggerId(520822);    // VPDMB-5-p-hlt
  picoCuts->addTriggerId(520832);    // VPDMB-5-p-hlt
  picoCuts->addTriggerId(520842);    // VPDMB-5-p-hlt

  picoCuts->addTriggerId(520001);    // VPDMB-5-p-sst
  picoCuts->addTriggerId(520011);    // VPDMB-5-p-sst
  picoCuts->addTriggerId(520021);    // VPDMB-5-p-sst
  picoCuts->addTriggerId(520031);    // VPDMB-5-p-sst
  picoCuts->addTriggerId(520041);    // VPDMB-5-p-sst
  picoCuts->addTriggerId(520051);    // VPDMB-5-p-sst

  picoCuts->setCutNHitsFitMin(14);
  picoCuts->setCutNHitsFitnHitsMax(0.52);
  picoCuts->setCutRequireHFT(false);
  picoCuts->setCutTPCNSigma(3.0);

  picoCuts->setCutDcaMin(1.0);
  picoCuts->setCutEta(1);
  picoCuts->setCutPtRange(0.2,30.0);

  vector<float> R; R.push_back(0.2); R.push_back(0.3); R.push_back(0.4); R.push_back(0.5);

  vector<float> Acuts; Acuts.push_back(0.07); Acuts.push_back(0.2); Acuts.push_back(0.4); Acuts.push_back(0.65);
  //TPC setters

  stPicoHFJetMaker->setNpTlead(10);
  stPicoHFJetMaker->setGhostMaxrap(1.0);
  stPicoHFJetMaker->setR(R);
  stPicoHFJetMaker->setJetPtMin(0.2);
  stPicoHFJetMaker->setAcuts(Acuts);
  stPicoHFJetMaker->setNJetsRemove(1);
  stPicoHFJetMaker->setR_bg(0.3);

  // set refmultCorr
//  cout<<"test"<<endl;
  //StRefMultCorr* grefmultCorrUtil = CentralityMaker::instance()->getgRefMultCorr_P16id(); //new StRefMultCorr, info about Run16, SL16d in the same file as for Run14, SL16d
  //stPicoHFJetMaker->setRefMutCorr(grefmultCorrUtil);
//  cout<<"test2"<<endl;
  // ========================================================================================

  // ========================================================================================

  //clock_t start = clock(); // getting starting time
  chain->Init();
  cout << "chain->Init();" << endl;
  //int nEvents = picoDstMaker->chain()->GetEntries();
  int nEvents = 10000;
  cout << " Total entries = " << nEvents << endl;
  //if(nEvents>total) nEvents = total;

  for (Int_t i=0; i< nEvents; i++) {
    if(i%100 == 0)
      cout << "Working on eventNumber " << i << endl;
    
    chain->Clear();
    int iret = chain->Make(i);
    
    if (iret) { cout << "Bad return code!" << iret << endl; break;}
    
    //total++;
  }
  
  cout << "****************************************** " << endl;
  cout << "Work done... now its time to close up shop!"<< endl;
  cout << "****************************************** " << endl;
  chain->Finish();
  //double duration = (double) (clock() - start) / (double) CLOCKS_PER_SEC;
  cout << "****************************************** " << endl;
  cout << "total number of events  " << nEvents << endl;
  cout << "****************************************** " << endl;
 // cout << "Time needed " << duration << " s" << endl;
  cout << "****************************************** " << endl;
  
  delete chain;

}
