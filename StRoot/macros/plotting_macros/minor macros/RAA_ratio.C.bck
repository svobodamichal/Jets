RAA_ratio(Int_t unc_type=0, Int_t rat_type=0, Double_t R1=0.3)
{
  //*******************
  //Style Setting
  //*******************
  gStyle->SetOptStat(0);
  gStyle->SetPalette(1);
  gStyle->SetOptDate(1);
  gStyle->SetPadLeftMargin(0.12);
  gStyle->SetPadRightMargin(0.09);
  gStyle->SetPadTopMargin(0.1);
  gStyle->SetPadBottomMargin(0.15);
  gStyle->SetTitleSize(0.055,"Y");
  gStyle->SetTitleOffset(0.95,"Y");
  gStyle->SetTitleSize(0.06,"X");
  gStyle->SetTitleOffset(0.95,"X");
  gStyle->SetLabelSize(0.03,"X");
  gStyle->SetLabelSize(0.03,"Y");
  
  //canvas size
  Int_t can_x=1200; //1600
  Int_t can_y=680; //900
  
  Color_t colorList[]={kBlue,kRed,kGreen+3,kMagenta+2,kBlue+3,kOrange+2,kYellow+2,kBlue-4,kOrange-2,kGreen,kRed+2,7,kGreen+4,13,14,15,16,17,18,19,20,21,22,23,24,25,26,29,28};
  Color_t colorList2[30]={kRed,kBlue-4,kOrange,kGreen,13,14,kMagenta+2,kGreen+3,15,kBlue,kOrange+2,kYellow+2,kRed+2,kBlack-2,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31};
 
  Float_t marker_size=1.0;
  Float_t line_width=2;
  Int_t markerU=21; //marker style for unfolding
    
  TString prior_type[]={/*0*/"truth",/*1*/"flat",/*2*/"pythia",/*3*/"powlaw3",/*4*/"powlaw4",/*5 */"powlaw5",/*6*/"powlaw6","levy","levy_alex"};
  TString prior_type_name[]={"truth", "flat","biased Pythia","1/pT^{3}","1/pT^{4}","1/pT^{5}","1/(pT)^{6}", "levy I", "levy II"};
  
  TString str;
  
  	//***************************
	//MAIN SETUP
	//****************************
  
    int doToymodel1=0;
	int doToymodel2=0;
	bool doRebin=true; //rebin Bayesian spectra so they can be compared to SVD
	
	TString unfname[]={"Bayes","SVD"};
	int SVD1=0;
	int SVD2=0;
	
	int nbins1=200; //Bayes 200, SVD 100
	int nbins2=200;
	if(SVD1) nbins1=100;
	if(SVD2) nbins2=100;
	
	TString UnfType[]={"BG","BGD","D"};
   int unftype1=1;
	int unftype2=1;
	
	int iter1=4; //1st iteration = 0 
	int iter2=4;
	if(SVD1) iter1=3;
	if(SVD1) iter2=3;
	
	Double_t R2=0.2;
	
	Double_t pTthresh1=5.0;
	Double_t pTthresh2=5.0;
	
	Int_t priorNoA=5;
    Int_t priorNoB=5;
	Int_t priorNoC=5;
			
	TString y_title=Form("R_{AA}(R=%.1lf)/R_{AA}(R=%.1lf)",R1,R2);
	TString y_title_spec=Form("ratio R=%.1lf/R=%.1lf",R1,R2);

	TString legA="#epsilon";
	TString legB="#epsilon+5%";
	TString legC="#epsilon-5%";
	
	TString trigger="MB";
	
	TString insuf1A="";
    TString insuf2A="";
	TString insuf1B="_p5_abs";
    TString insuf2B="_p5_abs";
	TString insuf1C="_m5_abs";
    TString insuf2C="_m5_abs";
	
	TString desc=Form("p_{T}^{leading}>%.1lf",pTthresh1);
	
	if(rat_type==1) //ratios of different pTleading cuts
	{
		R2=R1;
	
		pTthresh1=7.0;
		pTthresh2=5.0;
		
		y_title=Form("R_{AA}(p_{T}^{leading}>%.1lf)/R_{AA}(p_{T}^{leading}>%.1lf)",pTthresh1,pTthresh2);
		desc=Form("R=%.1lf",R1);
	}
	
	if(unc_type==1) //different priors
	{
		priorNoA=5;
    	priorNoB=3;
		priorNoC=8;
	
		legA=Form("prior: %s",prior_type_name[priorNoA].Data());
		legB=Form("prior: %s",prior_type_name[priorNoB].Data());
		legC=Form("prior: %s",prior_type_name[priorNoC].Data());
		
		insuf1B="";
    	insuf2B="";
		insuf1C="";
    	insuf2C="";
	
	}
	
	//*****************************
	
  TString wrkdir1=Form("./root/%s",trigger.Data());
  TString wrkdir2=Form("./root/%s",trigger.Data());
  
  TString wrkdir1A;
  TString wrkdir2A;
  TString wrkdir1B;
  TString wrkdir2B;
  TString wrkdir1C;
  TString wrkdir2C;  
  
   if(doToymodel1) wrkdir1A="./root/toymodel";
   if(doToymodel2) wrkdir2A="./root/toymodel";
	
  wrkdir1A = Form("%s/Unfolded_R%.1lf_%s_%ibins_%s%s",wrkdir1.Data(),R1,unfname[SVD1].Data(),nbins1,UnfType[unftype1].Data(),insuf1A.Data());
  wrkdir1B = Form("%s/Unfolded_R%.1lf_%s_%ibins_%s%s",wrkdir1.Data(),R1,unfname[SVD1].Data(),nbins1,UnfType[unftype1].Data(),insuf1B.Data());
  wrkdir1C = Form("%s/Unfolded_R%.1lf_%s_%ibins_%s%s",wrkdir1.Data(),R1,unfname[SVD1].Data(),nbins1,UnfType[unftype1].Data(),insuf1C.Data());
  wrkdir1D = Form("%s/Unfolded_R%.1lf_%s_%ibins_%s%s",wrkdir1.Data(),R1,unfname[SVD1D].Data(),nbins1,UnfType[unftype1].Data(),insuf1D.Data());
  wrkdir1E = Form("%s/Unfolded_R%.1lf_%s_%ibins_%s%s",wrkdir1.Data(),R1,unfname[SVD1E].Data(),nbins1,UnfType[unftype1].Data(),insuf1E.Data());
  
  wrkdir2A = Form("%s/Unfolded_R%.1lf_%s_%ibins_%s%s",wrkdir2.Data(),R2,unfname[SVD2].Data(),nbins2,UnfType[unftype2].Data(),insuf2A.Data());
  wrkdir2B = Form("%s/Unfolded_R%.1lf_%s_%ibins_%s%s",wrkdir2.Data(),R2,unfname[SVD2].Data(),nbins2,UnfType[unftype2].Data(),insuf2B.Data());
  wrkdir2C = Form("%s/Unfolded_R%.1lf_%s_%ibins_%s%s",wrkdir2.Data(),R2,unfname[SVD2].Data(),nbins2,UnfType[unftype2].Data(),insuf2C.Data());
  wrkdir2D = Form("%s/Unfolded_R%.1lf_%s_%ibins_%s%s",wrkdir2.Data(),R2,unfname[SVD2D].Data(),nbins2,UnfType[unftype2].Data(),insuf2D.Data());
  wrkdir2E = Form("%s/Unfolded_R%.1lf_%s_%ibins_%s%s",wrkdir2.Data(),R2,unfname[SVD2E].Data(),nbins2,UnfType[unftype2].Data(),insuf2E.Data());
  
  
  str = Form("%s/../histos_inclusivejet_R%.1lf.root", wrkdir1A.Data(),R1);
  if(doToymodel1) str = Form("%s/jetonly.root", wrkdir1A.Data());
  TFile *f = new TFile(str.Data(), "OPEN");
  TH1I* hevents1;
  if(!doToymodel1)hevents1= (TH1I*) f->Get("hevts");
  else hevents1= (TH1I*) f->Get("hevents");
  str = Form("%s/../histos_inclusivejet_R%.1lf.root", wrkdir2A.Data(),R2);
  if(doToymodel1) str = Form("%s/jetonly.root", wrkdir2A.Data());
  TFile *f = new TFile(str.Data(), "OPEN");
  TH1I* hevents2;
  if(!doToymodel2)hevents2= (TH1I*) f->Get("hevts");
  else hevents2= (TH1I*) f->Get("hevents");
  
  Int_t nevents=hevents2->GetEntries();
  Int_t nevents2=hevents2->GetEntries();
  
  Double_t hole1=(1.0/12.)+((R1*2.)/(2.*TMath::Pi())); //fraction of acceptance which was droped due to the bad sectors
  Double_t hole2=(1.0/12.)+((R2*2.)/(2.*TMath::Pi())); 
  if(doToymodel1)hole1=0;
  if(doToymodel2)hole2=0;
  Double_t scale_jets1 = 1./(2*(1.-R1)*2.*TMath::Pi()*nevents*(1-hole1));
  Double_t scale_jets2 = 1./(2*(1.-R2)*2.*TMath::Pi()*nevents*(1-hole2));
  
  Double_t TAA=22;
  Double_t scale_true=TAA/*/(2*TMath::Pi())*/;
  
  

  
  TLatex *latex = new TLatex();
  latex->SetNDC();
  latex->SetTextSize(0.04);
  TH1 *frame = new TH1I("frame", "", 1000, -100, +100);
  TH1 *frame2 = new TH1I("frame", "", 1000, -100, +100);
  
  Float_t spectraXmin=-20;
  Float_t spectraXmax=50;
  Float_t spectraYmin=1E-9;
  Float_t spectraYmax=1E-2;
  
  TString  filen;
  filen = Form("%s/%s/unfolded_SignalSpectrum_R%.1lf_pTthresh%.1lf.root", wrkdir1A.Data(),prior_type[priorNoA].Data(), R1, pTthresh1);
  cout<<filen<<endl;
  TFile *funfolding1A = new TFile(filen.Data(), "OPEN");
  filen = Form("%s/%s/unfolded_SignalSpectrum_R%.1lf_pTthresh%.1lf.root", wrkdir1B.Data(),prior_type[priorNoB].Data(), R1, pTthresh1);
  cout<<filen<<endl;
  TFile *funfolding1B = new TFile(filen.Data(), "OPEN");
  filen = Form("%s/%s/unfolded_SignalSpectrum_R%.1lf_pTthresh%.1lf.root", wrkdir1C.Data(),prior_type[priorNoC].Data(), R1, pTthresh1);
  cout<<filen<<endl;
  TFile *funfolding1C = new TFile(filen.Data(), "OPEN");
  filen = Form("%s/%s/unfolded_SignalSpectrum_R%.1lf_pTthresh%.1lf.root", wrkdir1D.Data(),prior_type[priorNoD].Data(), R1, pTthresh1);
  cout<<filen<<endl;
  TFile *funfolding1D = new TFile(filen.Data(), "OPEN");
  filen = Form("%s/%s/unfolded_SignalSpectrum_R%.1lf_pTthresh%.1lf.root", wrkdir1E.Data(),prior_type[priorNoE].Data(), R1, pTthresh1);
  cout<<filen<<endl;
  TFile *funfolding1E = new TFile(filen.Data(), "OPEN");
  
  
  filen = Form("%s/%s/unfolded_SignalSpectrum_R%.1lf_pTthresh%.1lf.root", wrkdir2A.Data(),prior_type[priorNoA].Data(), R2, pTthresh2);
  cout<<filen<<endl;
  TFile *funfolding2A = new TFile(filen.Data(), "OPEN");
  filen = Form("%s/%s/unfolded_SignalSpectrum_R%.1lf_pTthresh%.1lf.root", wrkdir2B.Data(),prior_type[priorNoB].Data(), R2, pTthresh2);
  cout<<filen<<endl;
  TFile *funfolding2B = new TFile(filen.Data(), "OPEN");
  filen = Form("%s/%s/unfolded_SignalSpectrum_R%.1lf_pTthresh%.1lf.root", wrkdir2C.Data(),prior_type[priorNoC].Data(), R2, pTthresh2);
  cout<<filen<<endl;
  TFile *funfolding2C = new TFile(filen.Data(), "OPEN");
  filen = Form("%s/%s/unfolded_SignalSpectrum_R%.1lf_pTthresh%.1lf.root", wrkdir2D.Data(),prior_type[priorNoD].Data(), R2, pTthresh2);
  cout<<filen<<endl;
  TFile *funfolding2D = new TFile(filen.Data(), "OPEN");
  filen = Form("%s/%s/unfolded_SignalSpectrum_R%.1lf_pTthresh%.1lf.root", wrkdir2E.Data(),prior_type[priorNoE].Data(), R2, pTthresh2);
  cout<<filen<<endl;
  TFile *funfolding2E = new TFile(filen.Data(), "OPEN");
  
  //UNFOLDED SPECTRA

  str = Form("iter%d",iter1);
  TDirectoryFile* dir;
  dir = (TDirectoryFile*)funfolding1A->Get(str.Data());
  TH1D* hunfolded1A = (TH1D*) dir->Get("hunfolded");
  hunfolded1A->SetLineColor(colorList[1]);
  hunfolded1A->SetMarkerColor(colorList[1]);
  hunfolded1A->SetMarkerStyle(markerU);
  hunfolded1A->SetMarkerSize(marker_size);
  hunfolded1A->SetLineWidth(line_width);
  
  dir = (TDirectoryFile*)funfolding1B->Get(str.Data());
  TH1D* hunfolded1B = (TH1D*)dir->Get("hunfolded");
  hunfolded1B->SetLineColor(colorList[2]);
  hunfolded1B->SetMarkerColor(colorList[2]);
  hunfolded1B->SetMarkerStyle(markerU);
  hunfolded1B->SetMarkerSize(marker_size);
  hunfolded1B->SetLineWidth(line_width);
  
  dir = (TDirectoryFile*)funfolding1C->Get(str.Data());
  TH1D* hunfolded1C = (TH1D*)dir->Get("hunfolded");
  hunfolded1C->SetLineColor(colorList[3]);
  hunfolded1C->SetMarkerColor(colorList[3]);
  hunfolded1C->SetMarkerStyle(markerU);
  hunfolded1C->SetMarkerSize(marker_size);
  hunfolded1C->SetLineWidth(line_width);
  
  dir = (TDirectoryFile*)funfolding1D->Get(str.Data());
  TH1D* hunfolded1D = (TH1D*)dir->Get("hunfolded");
  hunfolded1D->SetLineColor(colorList[4]);
  hunfolded1D->SetMarkerColor(colorList[4]);
  hunfolded1D->SetMarkerStyle(markerU);
  hunfolded1D->SetMarkerSize(marker_size);
  hunfolded1D->SetLineWidth(line_width);
  
  dir = (TDirectoryFile*)funfolding1E->Get(str.Data());
  TH1D* hunfolded1E = (TH1D*)dir->Get("hunfolded");
  hunfolded1E->SetLineColor(colorList[5]);
  hunfolded1E->SetMarkerColor(colorList[5]);
  hunfolded1E->SetMarkerStyle(markerU);
  hunfolded1E->SetMarkerSize(marker_size);
  hunfolded1E->SetLineWidth(line_width);
  
  str = Form("iter%i", iter2);
  dir = (TDirectoryFile*)funfolding2A->Get(str.Data());
  TH1D* hunfolded2A = (TH1D*)dir->Get("hunfolded");
  hunfolded2A->SetLineColor(colorList[1]);
  hunfolded2A->SetMarkerColor(colorList[1]);
  hunfolded2A->SetMarkerStyle(markerU);
  hunfolded2A->SetMarkerSize(marker_size);
  hunfolded2A->SetLineWidth(line_width);
  
  dir = (TDirectoryFile*)funfolding2B->Get(str.Data());
  TH1D* hunfolded2B = (TH1D*)dir->Get("hunfolded");
  hunfolded2B->SetLineColor(colorList[2]);
  hunfolded2B->SetMarkerColor(colorList[2]);
  hunfolded2B->SetMarkerStyle(markerU);
  hunfolded2B->SetMarkerSize(marker_size);
  hunfolded2B->SetLineWidth(line_width);
  
  dir = (TDirectoryFile*)funfolding2C->Get(str.Data());
  TH1D* hunfolded2C = (TH1D*)dir->Get("hunfolded");
  hunfolded2C->SetLineColor(colorList[3]);
  hunfolded2C->SetMarkerColor(colorList[3]);
  hunfolded2C->SetMarkerStyle(markerU);
  hunfolded2C->SetMarkerSize(marker_size);
  hunfolded2C->SetLineWidth(line_width);
  
  dir = (TDirectoryFile*)funfolding2D->Get(str.Data());
  TH1D* hunfolded2D = (TH1D*)dir->Get("hunfolded");
  hunfolded2C->SetLineColor(colorList[4]);
  hunfolded2C->SetMarkerColor(colorList[4]);
  hunfolded2C->SetMarkerStyle(markerU);
  hunfolded2C->SetMarkerSize(marker_size);
  hunfolded2C->SetLineWidth(line_width);
  
  dir = (TDirectoryFile*)funfolding2E->Get(str.Data());
  TH1D* hunfolded2E = (TH1D*)dir->Get("hunfolded");
  hunfolded2E->SetLineColor(colorList[5]);
  hunfolded2E->SetMarkerColor(colorList[5]);
  hunfolded2E->SetMarkerStyle(markerU);
  hunfolded2E->SetMarkerSize(marker_size);
  hunfolded2E->SetLineWidth(line_width);
  
  //pp BASELINE
  filen = "./root/pp/PythiaHistosChargedJets2.root";
  ftruth = new TFile(filen.Data(), "OPEN");

  str=Form("h_PythiaJetPt0p%.0lfTot",R1*10);
  TH1D *htemp =(TH1D*) ftruth->Get(str.Data());
  
  TH1D *htruthp1 = (TH1D*)hunfolded1A->Clone("htruthp1");
  htruthp1->Sumw2();
  htruthp1->Reset("MICE");
  for(Int_t bin = 1; bin < htemp->GetNbinsX()+1; bin++)
    {
      Double_t pTtmp = htemp->GetBinCenter(bin);
      Double_t yield = htemp->GetBinContent(bin);
      Double_t oldWidth=htemp->GetBinWidth(bin);
      Int_t newBin=htruthp1->FindBin(pTtmp);
      Double_t newWidth=htruthp1->GetBinWidth(newBin);
      //cout<<"bin:"<<binx<<" pT:"<<pT<<" yield:"<<yield<<" width: "<<binWidth<<" -> "<<newWidth<<" new yield:";
      yield=yield*(oldWidth/newWidth);
      htruthp1->Fill(pTtmp, yield);
    }
  for(Int_t bin = 1; bin <= htruthp1->GetNbinsX(); bin++)
    {
      Double_t yield = htruthp1->GetBinContent(bin);
      Int_t bint=htemp->FindBin(htruthp1->GetBinCenter(bin));
      Double_t error= (htemp->GetBinError(bint))/(htemp->GetBinContent(bint));
      htruthp1->SetBinError(bin,error*yield);
    }
      delete htemp;

  htruthp1->SetMarkerColor(colorList[0]);
  htruthp1->SetLineColor(colorList[0]);
  htruthp1->SetMarkerStyle(kFullSquare);
  htruthp1->SetMarkerSize(marker_size);
  htruthp1->SetLineWidth(line_width);
  htruthp1->Sumw2();
  htruthp1->Scale(scale_true);
  
  str=Form("h_PythiaJetPt0p%.0lfTot",R2*10);
  TH1D *htemp =(TH1D*) ftruth->Get(str.Data());
  
  TH1D *htruthp2 = (TH1D*)hunfolded1A->Clone("htruthp2");
  htruthp2->Sumw2();
  htruthp2->Reset("MICE");
  for(Int_t bin = 1; bin < htemp->GetNbinsX()+1; bin++)
    {
      Double_t pTtmp = htemp->GetBinCenter(bin);
      Double_t yield = htemp->GetBinContent(bin);
      Double_t oldWidth=htemp->GetBinWidth(bin);
      Int_t newBin=htruthp2->FindBin(pTtmp);
      Double_t newWidth=htruthp2->GetBinWidth(newBin);
      //cout<<"bin:"<<binx<<" pT:"<<pT<<" yield:"<<yield<<" width: "<<binWidth<<" -> "<<newWidth<<" new yield:";
      yield=yield*(oldWidth/newWidth);
      htruthp2->Fill(pTtmp, yield);
    }
  for(Int_t bin = 1; bin <= htruthp2->GetNbinsX(); bin++)
    {
      Double_t yield = htruthp2->GetBinContent(bin);
      Int_t bint=htemp->FindBin(htruthp2->GetBinCenter(bin));
      Double_t error= (htemp->GetBinError(bint))/(htemp->GetBinContent(bint));
      htruthp2->SetBinError(bin,error*yield);
    }
      delete htemp;

  htruthp2->SetMarkerColor(kGray+1);
  htruthp2->SetLineColor(kGray+1);
  htruthp2->SetMarkerStyle(kFullSquare);
  htruthp2->SetMarkerSize(marker_size);
  htruthp2->SetLineWidth(line_width);
  htruthp2->Sumw2();
  htruthp2->Scale(scale_true);
  
//rebin
  if(!SVD1 && doRebin)
  {
	hunfolded1A->Rebin(2);  
	hunfolded1B->Rebin(2);  
	hunfolded1C->Rebin(2);
	htruthp1->Rebin(2);
  }
  if(!SVD2 && doRebin )
  {
	hunfolded2A->Rebin(2);  
	hunfolded2B->Rebin(2);  
	hunfolded2C->Rebin(2);
	htruthp2->Rebin(2);
  }

  //RAAs
  TH1D* hraa1A=(TH1D*)hunfolded1A->Clone("hraa1A");
  hraa1A->Divide(htruthp1);
  TH1D* hraa1B=(TH1D*)hunfolded1B->Clone("hraa1B");
  hraa1B->Divide(htruthp1);
  TH1D* hraa1C=(TH1D*)hunfolded1C->Clone("hraa1C");
  hraa1C->Divide(htruthp1);
  TH1D* hraa2A=(TH1D*)hunfolded2A->Clone("hraa2A");
  hraa2A->Divide(htruthp2);
  TH1D* hraa2B=(TH1D*)hunfolded2B->Clone("hraa2B");
  hraa2B->Divide(htruthp2);
  TH1D* hraa2C=(TH1D*)hunfolded2C->Clone("hraa2C");
  hraa2C->Divide(htruthp2);
  
  
  //Ratios of RAAs
  TH1D* hratA=hraa1A->Clone("hratA");
  hratA->Divide(hraa2A);
  TH1D* hratB=hraa1B->Clone("hratB");
  hratB->Divide(hraa2B);
  TH1D* hratC=hraa1C->Clone("hratC");
  hratC->Divide(hraa2C);
  
  //Ratios of spectra
  TH1D* hratspecA=(TH1D*)hunfolded1A->Clone("hratspecA");
  hratspecA->Divide(hunfolded2A);
  TH1D* hratspecB=(TH1D*)hunfolded1B->Clone("hratspecB");
  hratspecB->Divide(hunfolded2B);
  TH1D* hratspecC=(TH1D*)hunfolded1C->Clone("hratspecC");
  hratspecC->Divide(hunfolded2C);
  TH1D* hratspec_pp=(TH1D*)htruthp1->Clone("hratspec_pp");
  hratspec_pp->Divide(htruthp2);
    
  //Draw histograms
  TCanvas *cratio = new TCanvas("cratio","cratio",10,10,can_x,can_y);
  cratio->cd();
  cratio->SetGrid();
  frame->SetTitle("R_{AA} Ratios");
  frame->GetXaxis()->SetRangeUser(0, 30);
  frame->GetYaxis()->SetRangeUser(0.1, 1.5); 
  frame->GetXaxis()->SetTitle("p_{T, corr}^{charged} (GeV/c)");
  frame->GetYaxis()->SetTitle(y_title);
  frame->DrawCopy("");
  
  hratA->DrawCopy("esame");
  hratB->DrawCopy("esame");
  hratC->DrawCopy("esame");
  
  TLine *one = new TLine(0, 1, 30, 1);
  one->SetLineWidth(2);
  one->SetLineStyle(2);
  one->SetLineColor(kBlack);
  one->DrawClone("same");
  
  TLegend *legend = new TLegend(0.62, 0.7291, 0.8896, 0.90);
  legend->SetFillStyle(0);
  legend->SetBorderSize(0);
  legend->AddEntry(hratA, legA, "lp");
  legend->AddEntry(hratB, legB, "lp");
  legend->AddEntry(hratC, legC, "lp");
  legend->DrawClone("same");
  
  TLegend *model_info = new TLegend(0.12037, 0.52, 0.3348, 0.900);
  model_info->SetFillStyle(0);
  model_info->SetBorderSize(0);
  model_info->SetMargin(0.05);
  model_info->SetHeader(Form("Run11 AuAu 200 GeV, %s",trigger.Data()));
  if(doToymodel1) model_info->SetHeader("TOYMODEL: RHIC kinematics");
  //model_info->AddEntry("", "Single Particle", "");
  if (!doToymodel1) model_info->AddEntry("", "0-10% Central Collisions", "");
  if(doToymodel1)model_info->AddEntry("", Form("N_{events} = %.1lfM", nevents/1E6), "");
  else model_info->AddEntry("", "Integrated luminosity: 6#mub^{-1}","");
  //model_info->AddEntry("", Form("N_{events} = %.1lfM", nevents/1E6), "");
  model_info->AddEntry("", "Anti-k_{T}","");
  model_info->AddEntry("", "p_{T}^{const} > 0.2 GeV/c", "");
  model_info->DrawClone("same");
  
  latex->DrawLatex(0.4, 0.8,desc);
  
  TCanvas *cratspec = new TCanvas("cratspec","cratspec",10,10,can_x,can_y);
  cratspec->cd();
  cratspec->SetGrid();
  frame->SetTitle("Ratios of p_{T} spectra");
  frame->GetXaxis()->SetRangeUser(0, 30);
  frame->GetYaxis()->SetRangeUser(0.1, 3.0); 
  frame->GetXaxis()->SetTitle("p_{T, corr}^{charged} (GeV/c)");
  frame->GetYaxis()->SetTitle(y_title_spec);
  frame->DrawCopy("");
  
  hratspecA->DrawCopy("esame");
  hratspecB->DrawCopy("esame");
  hratspecC->DrawCopy("esame");
  if(rat_type==0)hratspec_pp->DrawCopy("esame");
  
  TLine *one = new TLine(0, 1, 30, 1);
  one->SetLineWidth(2);
  one->SetLineStyle(2);
  one->SetLineColor(kBlack);
  one->DrawClone("same");
  
  TLegend *leg = new TLegend(0.62, 0.7291, 0.8896, 0.90);
  leg->SetFillStyle(0);
  leg->SetBorderSize(0);
  leg->AddEntry(hratspecA, legA, "lp");
  leg->AddEntry(hratspecB, legB, "lp");
  leg->AddEntry(hratspecC, legC, "lp");
   if(rat_type==0)leg->AddEntry(hratspec_pp,"Pythia baseline","lp");
  leg->DrawClone("same");
  
  model_info->DrawClone("same");
  
  latex->DrawLatex(0.4, 0.8,desc);
  
}
